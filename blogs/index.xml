<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Suneet Agrawal</title>
    <link>https://agrawalsuneet.github.io/blogs/</link>
    <description>Recent content in Blogs on Suneet Agrawal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://agrawalsuneet.github.io/blogs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Companion object in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/companion-object-in-kotlin/</link>
      <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/companion-object-in-kotlin/</guid>
      <description>Unlike Java or C#, Kotlin doesn’t have static members or member functions. Kotlin recommends to simply use package-level functions instead. If you need to write a function that can be called without having a class instance but needs access to the internals of a class, you can write it as a member of a companion object declaration inside that class.</description>
    </item>
    
    <item>
      <title>Backing Field in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/backing-field-in-kotlin/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/backing-field-in-kotlin/</guid>
      <description>Backing field is an autogenerated field for any property which can only be used inside the accessors(getter or setter) and will be present only if it uses the default implementation of at least one of the accessors, or if a custom accessor references it through the field identifier.</description>
    </item>
    
    <item>
      <title>lateinit property in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/lateinit-property-in-kotlin/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/lateinit-property-in-kotlin/</guid>
      <description>There can be two ways to declare and initialize a var property. The first property type is initialized while declaration itself and doesn’t require a null check (!!) while using it.</description>
    </item>
    
    <item>
      <title>Safe calls(?.) vs Null checks(!!) in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/safe-calls-vs-null-checks-in-kotlin/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/safe-calls-vs-null-checks-in-kotlin/</guid>
      <description>In Kotlin, the type system distinguishes between references that can hold null (nullable references) and those that can not (non-null references). For example, a normal property can’t hold a null value and will show a compile error.</description>
    </item>
    
    <item>
      <title>Native Android in Unity</title>
      <link>https://agrawalsuneet.github.io/blogs/native-android-in-unity/</link>
      <pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/native-android-in-unity/</guid>
      <description>While developing unity games in C# targeting android platform, we always want to use few native android features in our game. These features can be showing notifications on certain actions in the game or can be sharing the high score with other players and inviting them to try our game using android native share.</description>
    </item>
    
    <item>
      <title>How extension functions resolved?</title>
      <link>https://agrawalsuneet.github.io/blogs/how-extension-functions-resolved/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/how-extension-functions-resolved/</guid>
      <description>how does extension functions are actually resolved? This question is being asked by almost everyone both in and outside the interviews. The shorted or the only answer I get is &amp;lsquo;Statically&amp;rsquo;. What does statically means?</description>
    </item>
    
    <item>
      <title>Inheritance vs Extension functions</title>
      <link>https://agrawalsuneet.github.io/blogs/inheritance-vs-extension-functions/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/inheritance-vs-extension-functions/</guid>
      <description>We all know about inheritance which is there in the OOPs concept where one can extend a class and add functionality to it. In the new programming languages, there is something called as extension functions which can add a functionality to an existing class without extending it.</description>
    </item>
    
  </channel>
</rss>