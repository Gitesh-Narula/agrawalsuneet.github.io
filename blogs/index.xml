<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Suneet Agrawal</title>
    <link>https://agrawalsuneet.github.io/blogs/</link>
    <description>Recent content in Blogs on Suneet Agrawal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://agrawalsuneet.github.io/blogs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>‘in’ operator in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/in-operator-in-kotlin/</link>
      <pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/in-operator-in-kotlin/</guid>
      <description>‘in’ operator in Koltin is used to check the existence of particular variable or property in a Range or Collection whereas a ‘!in’ operator is just a not of ‘in’ operator and returns true if the condition is false. It can also be used to iterate over a range or collection.    (adsbygoogle = window.adsbygoogle || []).push({});    1. ‘in’ operator in ‘if’ condition  val count = 5;if (count in 1.</description>
    </item>
    
    <item>
      <title>‘when’ operator in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/when-operator-in-kotlin/</link>
      <pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/when-operator-in-kotlin/</guid>
      <description>when operator is a replacement of switch operator in other languages.  var intNumber = 10 when (intNumber) { 1 - print(“value is 1”) 2 - print(“value is 2”) else - { print(“value of intNumber is neither 1 nor 2”) } }    (adsbygoogle = window.adsbygoogle || []).push({});   when operator matches its argument with all the branches until it matches with anyone, else it executes the else block.</description>
    </item>
    
    <item>
      <title>TypeCheck (‘is’) and Cast (‘as’) in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/typecheck-is-and-cast-as-in-kotlin/</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/typecheck-is-and-cast-as-in-kotlin/</guid>
      <description>Type check is a way of checking the type(DataType) or Class of a particular instance or variable while runtime to separate the flow for different objects. In few languages, it’s also denoted as Run Time Type Identification (RTTI).    (adsbygoogle = window.adsbygoogle || []).push({});   Let’s consider an example where we have an Interface called Shape having an abstract method as calculateArea.  interface Shape { fun calculateArea(): Float}  We have three different classes implementing the same interface and implementing their own area calculating method according to their shapes.</description>
    </item>
    
    <item>
      <title>Inheritance vs Extension functions</title>
      <link>https://agrawalsuneet.github.io/blogs/inheritance-vs-extension-functions/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/inheritance-vs-extension-functions/</guid>
      <description>We all know about inheritance which is there in the OOPs concept where one can extend a class and add functionality to it. In the new programming languages, there is something called as extension functions which can add a functionality to an existing class without extending it.  Sometimes we are confused about what to use when. To get help here, one needs to understand first what are these two and what are the benefits and limitations over the other.</description>
    </item>
    
    <item>
      <title>Native Android image sharing in Unity using FileProvider</title>
      <link>https://agrawalsuneet.github.io/blogs/native-android-image-sharing-in-unity-using-fileprovider/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/native-android-image-sharing-in-unity-using-fileprovider/</guid>
      <description>While implementing native sharing using my previous post, Native Android image sharing in Unity we saw an exception “android.os.FileUriExposedException” in Android 8 (Oreo) and above.   Since Google changed the sharing way using FileProvider to make it more secure, we can not share the file object directly to any other Application. We need to use the FileProvider and grant read URI permission to make it accessible for any other app.</description>
    </item>
    
    <item>
      <title>Native Android text sharing to particular app in Unity</title>
      <link>https://agrawalsuneet.github.io/blogs/native-android-text-sharing-to-particular-app-in-unity/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/native-android-text-sharing-to-particular-app-in-unity/</guid>
      <description>In the previous medium posts Native Android text sharing in Unity and Native Android image sharing in Unity we learnt about how to share some text or screenshot to other apps in a Unity app targeting Android platforms. In this post will target sharing the same text or image to some particular app directly.   If you have not read the previous medium posts, I would strongly recommend to read them first.</description>
    </item>
    
    <item>
      <title>Native Android image sharing in Unity</title>
      <link>https://agrawalsuneet.github.io/blogs/native-android-image-sharing-in-unity/</link>
      <pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/native-android-image-sharing-in-unity/</guid>
      <description>In continuation to my previous medium post Native Android in Unity and Native Android text sharing in Unity, will consider another example of native Android screenshot sharing functionality in the unity app.   If you have not read the previous medium posts, I would strongly recommend to read them first. You can read them on the links below.  Native Android in Unity Native Android text sharing in Unity   As the number says, an image gains more attention than a normal text while sharing.</description>
    </item>
    
    <item>
      <title>Native Android text sharing in Unity</title>
      <link>https://agrawalsuneet.github.io/blogs/native-android-text-sharing-in-unity/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/native-android-text-sharing-in-unity/</guid>
      <description>In continuation to my previous medium post Native Android in Unity, will consider another example of native Android text sharing functionality in the unity app. This is a very common requirement in any unity app targeting Android platform to share the high score or challenge other players with a text message or a screenshot of the high score. The sharing can be done via any of the app available on the user’s device which supports sharing.</description>
    </item>
    
    <item>
      <title>Difference between Any, Unit and Nothing : Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/difference-between-any-unit-and-nothing-kotlin/</link>
      <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/difference-between-any-unit-and-nothing-kotlin/</guid>
      <description>We all know about three classes Any, Unit and Nothing in Kotlin which have their own functionality and use cases but we usually confuse between the differences among them and when to use what.   Let try to understand what are these, when to use what and how these are different from one another.    (adsbygoogle = window.adsbygoogle || []).push({});    Any  Any is an open class and by default the superclass for all the classes, whether we define it explicitly or not.</description>
    </item>
    
    <item>
      <title>Why let function is an Extension to Template class?</title>
      <link>https://agrawalsuneet.github.io/blogs/why-let-function-is-an-extension-to-template-class/</link>
      <pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/why-let-function-is-an-extension-to-template-class/</guid>
      <description>After reading my last blog about let scope function in Kotlin, a lot of developers have asked me about, why let is an extension to Template class but not Any class?   Not only let, but other helper functions like apply, also, takeIf and takeUnless are also extension functions to the Template class.    (adsbygoogle = window.adsbygoogle || []).push({});    The question is why?   Any is the base class for all the class, similar to java.</description>
    </item>
    
    <item>
      <title>&#39;let&#39; scope function : Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/let-scope-function-kotlin/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/let-scope-function-kotlin/</guid>
      <description>Kotlin has made our life very easy by providing features like extension functions, nullability check and much more. One such kind of really helpful feature is Scope functions. Once you understand what scope functions are, you will not able to resist yourself from using them.   Scope functions are nothing but the functions which define to the scope of the calling object. We can apply operations on that object within that scope and return the object itself from that scope function or we can even return the result of operation or operations from the scope function.</description>
    </item>
    
    <item>
      <title>How extension functions resolved?</title>
      <link>https://agrawalsuneet.github.io/blogs/how-extension-functions-resolved/</link>
      <pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/how-extension-functions-resolved/</guid>
      <description>&amp;ldquo;how are extension functions resolved?&amp;rdquo;  This question is being asked by almost everyone both in and outside the interviews.  Even I have asked this question to many candidates during the interview.  The shorted or the only answer I get is &amp;ldquo;Statically&amp;rdquo;.   What does statically means?  Or how does extension functions are actually resolved? 
  (adsbygoogle = window.adsbygoogle || []).push({});   Let&#39;s understand this with an example.</description>
    </item>
    
    <item>
      <title>Variable number of arguments (vararg) : Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/variable-number-of-arguments-vararg-kotlin/</link>
      <pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/variable-number-of-arguments-vararg-kotlin/</guid>
      <description>Sometimes we need a function where we can pass n number of parameters, and the value of n can be decided at runtime. Kotlin provides us to achieve the same by defining a parameter of a function as vararg. We can pass n number of parameters to a vararg variable of the defined datatype or even of a generic type.    (adsbygoogle = window.adsbygoogle || []).push({});   Let me give you an example.</description>
    </item>
    
    <item>
      <title>lateinit property in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/lateinit-property-in-kotlin/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/lateinit-property-in-kotlin/</guid>
      <description>There can be two ways to declare and initialize a var property  var variable : CustomClass = CustomClass()  orvar variable : CustomClass? = null    (adsbygoogle = window.adsbygoogle || []).push({});   The first property is initialized while declaration itself and doesn’t require a null check (?.) while using it.  But in the second type, the property is initialized with a null value and will require a null check (?</description>
    </item>
    
    <item>
      <title>Property, Getter and Setter : Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/property-getter-and-setter-kotlin/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/property-getter-and-setter-kotlin/</guid>
      <description>I started developing Android apps in Java where encapsulation of object-oriented programming was achieved through declaring variables as private fields with their getter and setter as public methods. The moment I converted my Java code to Kotlin, it replaced each variable along with its getter and setter with just a single line of code. Although I was amazed at how can a single line of code replace the complete variable with the same functionality, but later on understanding it, I started liking writing the code in Kotlin.</description>
    </item>
    
    <item>
      <title>Safe calls(?.) vs Null checks(!!) in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/safe-calls-vs-null-checks-in-kotlin/</link>
      <pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/safe-calls-vs-null-checks-in-kotlin/</guid>
      <description>In Kotlin, the type system distinguishes between references that can hold null (nullable references) and those that can not (non-null references).  For example, a normal property can’t hold a null value and will show a compile error.  var variable : CustomClass = CustomClass()variable = null //compilation error    (adsbygoogle = window.adsbygoogle || []).push({});   Instead, we can add a ? after the data type of that property which declares that variable as a nullable property  var nullableVariable : CustomClass?</description>
    </item>
    
    <item>
      <title>Equality in Kotlin (‘==’, ‘===’ and ‘equals’)</title>
      <link>https://agrawalsuneet.github.io/blogs/equality-in-kotlin/</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/equality-in-kotlin/</guid>
      <description>We often need to compare the data of two variables or objects or the references of two objects in Kotlin. This brings in another question, which equality check should we use in which case.  Let’s figure out what are the types of checks available in Kotlin.    (adsbygoogle = window.adsbygoogle || []).push({});    Structural Equality (‘==’)  == operator is used to compare the data of two variables.</description>
    </item>
    
    <item>
      <title>Companion object in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/companion-object-in-kotlin/</link>
      <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/companion-object-in-kotlin/</guid>
      <description>Unlike Java or C#, Kotlin doesn’t have static members or member functions. Kotlin recommends to simply use package-level functions instead.  If you need to write a function that can be called without having a class instance but needs access to the internals of a class, you can write it as a member of a companion object declaration inside that class. By declaring a companion object inside our class, you’ll be able to call its members with the same syntax as calling static methods in Java/C#, using only the class name as a qualifier.</description>
    </item>
    
    <item>
      <title>Backing Field in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/backing-field-in-kotlin/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/backing-field-in-kotlin/</guid>
      <description>What is Backing Field ? 
Backing field is an autogenerated field for any property which can only be used inside the accessors(getter or setter) and will be present only if it uses the default implementation of at least one of the accessors, or if a custom accessor references it through the field identifier. This backing field is used to avoid the recursive call of an accessor which ultimately prevents the StackOverflowError.</description>
    </item>
    
    <item>
      <title>Native Android in Unity</title>
      <link>https://agrawalsuneet.github.io/blogs/native-android-in-unity/</link>
      <pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/native-android-in-unity/</guid>
      <description>While developing unity games in C# targeting android platform, we always want to use few native android features in our game. These features can be showing notifications on certain actions in the game or can be sharing the high score with other players and inviting them to try our game using android native share. Android gives us all the possibilities to achieve these native android functionalities in unity app using C#.</description>
    </item>
    
  </channel>
</rss>